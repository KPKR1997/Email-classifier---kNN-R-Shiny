ui <- fluidpage()
library(shiny)
install(shiny)
library(shiny)
ui <- fluidPage(
titlepanel("ozone")
)
library(shiny)
ui <- fluidPage(
titlepanel("ozone")
)
ui <- fluidPage(
titlepanel("ozone")
),
ui <- fluidPage(
titlepanel("ozone")
)
install.packages("shiny")
install.packages("RTOOLS")
shiny::runApp('E:/shiny-web-app/FirstSingleApp')
library()
1+1
runApp('E:/shiny-web-app/FirstSingleApp')
x=2
y=3
y<-t
3?
>
install.packages(c("ggplot2", "ggplot", "plotly"))
library(ggplot2)
install.packages("ggplot")
install.packages("plotly")
library('plotly')
# Check dependencies of ggplot2
install.packages("ggplot2", dependencies = TRUE)
library(rpart)
gender_data <- data.frame()
gender_data <- data.frame()
gender_data <- data.frame(
Tooth = factor(c("Yes", "No", "Yes", "Yes", "Yes", "No")),
Hair = factor(c("Long", "Short", "Long", "Short", "Long", "Short")),
Lipstick = factor(c("Yes", "No", "No", "No", "Yes", "Yes", "No")),
Moustache = factor(c("No", "Yes", "No", "No", "No", "Yes")).
gender_data <- data.frame(
+ Tooth = factor(c("Yes", "No", "Yes", "Yes", "Yes", "No")),
+ Hair = factor(c("Long", "Short", "Long", "Short", "Long", "Short")),
+ Lipstick = factor(c("Yes", "No", "No", "No", "Yes", "Yes", "No")),
+ Moustache = factor(c("No", "Yes", "No", "No", "No", "Yes")),
gender_data <- data.frame(
+ Tooth = factor(c("Yes", "No", "Yes", "Yes", "Yes", "No")),
+ Hair = factor(c("Long", "Short", "Long", "Short", "Long", "Short")),
+ Lipstick = factor(c("Yes", "No", "No", "No", "Yes", "Yes", "No")),
+ Moustache = factor(c("No", "Yes", "No", "No", "No", "Yes")), +
gender_data <- data.frame(
+ Tooth = factor(c("Yes", "No", "Yes", "Yes", "Yes", "No")),
+ Hair = factor(c("Long", "Short", "Long", "Short", "Long", "Short")),
+ Lipstick = factor(c("Yes", "No", "No", "No", "Yes", "Yes", "No")),
+ Moustache = factor(c("No", "Yes", "No", "No", "No", "Yes")),
gender_data <- data.frame(
Tooth = factor(c("Yes", "No", "Yes", "Yes", "Yes", "No")),
Hair = factor(c("Long", "Short", "Long", "Short", "Long", "Short")),
Lipstick = factor(c("Yes", "No", "No", "No", "Yes", "Yes", "No")),
Moustache = factor(c("No", "Yes", "No", "No", "No", "Yes")),
Gender = factor(c("Girl", "Boy", "Girl", "Girl", "Girl", "Girl", "Boy"))
)
gender_data <- data.frame(
Tooth = factor(c("Yes", "No", "Yes", "Yes", "Yes", "No")),
Hair = factor(c("Long", "Short", "Long", "Short", "Long", "Short")),
Lipstick = factor(c("Yes", "No", "No", "Yes", "Yes", "No")),
Moustache = factor(c("No", "Yes", "No", "No", "No", "Yes")),
Gender = factor(c("Girl", "Boy", "Girl", "Girl", "Girl", "Boy"))
)
gender_data
model <- rpart(Gender ~ Tooth + Hair + Lipstick + Moustache, data = gender_data, method = "class")
summary(model)
new_gender_data <- data.frame(
Teeth = factor(c("Yes", "Yes")),
)
new_gender_data <- data.frame(
Tooth = factor(c("Yes", "Yes")), levels = levels(gender_data$Tooth)),
new_gender_data <- data.frame(
+ Tooth = factor(c("Yes", "Yes"), levels = levels(gender_data$Tooth)),
new_gender_data <- data.frame(
Tooth = factor(c("Yes", "Yes"), levels = levels(gender_data$Tooth)),
Hair = factor(c("Long", "Short"), levels = levels(gender_data$Hair)),
Lipstick = factor(c("Yes", "No"), levels = levels(gender_data$Lipstick)),
Moustache = factor(c("No", "Yes"), levels = levels(gender_data$Moustache))
)
predictions <- predict(model, new_gender_data, type = "class")
print(predictions)
rpart.plot(model)
library(rpart.plot)
install.packages(rpart.plot)
install.packages("rpart.plot")
model <- rpart(Gender ~ Tooth + Hair + Lipstick + Moustache, data = gender_data, method = "class",
control = rpart.control(minsplit = 2, cp = 0.01))
predictions <- predict(model, new_gender_data, type = "class")
print(predictions)
rpart.plot(model)
library(rpart.model)
library(rpart.plot)
rpart.plot(model)
<- rpart(Gender ~ Moustache + Tooth + Hair + Lipstick, data = gender_data, method = "class")
model <- Moustache
model <- <- rpart(Gender ~ Moustache + Tooth + Hair + Lipstick, data = gender_data, method = "class")\
model <- <- rpart(Gender ~ Moustache + Tooth + Hair + Lipstick, data = gender_data, method = "class")
model <- rpart(Gender ~ Moustache + Tooth + Hair + Lipstick, data = gender_data, method = "class")
predictions <- predict(model, new_gender_data, type = "class")
print(predictions)
rpart.plot(model)
data1 <- factor(rep(c("A", "b"), each = 3)),
data2 <- data.frame()
data2 <- data.frame(
method = factor(rep(c("A", "B"), each = 3)),
ages = c(1,2,3,4,5,6)
)
data2
test_scores <- data.frame(
method = factor(rep(c("A", "B", "C"), each = 5)),
score = c(85, 88, 90, 91, 87, 78, 80, 82, 79, 77, 90, 92, 94, 91, 93)
)
test_scores
result <- aov(score ~ method, data = test_scores)
resulr
result
summary(result)
# Load necessary library
library(ggplot2)
# Generate random data following a standard normal distribution
set.seed(123)  # For reproducibility
standard_normal_data <- rnorm(1000)  # Mean = 0, SD = 1
# Create a data frame
standard_normal_df <- data.frame(Value = standard_normal_data)
# Plot the distribution using ggplot2
ggplot(standard_normal_df, aes(x = Value)) +
geom_histogram(aes(y = ..density..), bins = 30, fill = "blue", alpha = 0.5) +
geom_density(color = "red", size = 1) +
labs(title = "Standard Normal Distribution",
x = "Z-Score",
y = "Density") +
theme_minimal()
:
norm_samp <- rnorm(100)
qqnorm(norm_samp)
abline(a=0, b=1, col='grey')
norm_samp <- rnorm(100)
qqnorm(norm_samp)
abline(a=0, b=1, col='grey')
# Load necessary library
library(e1071)
model <- naiveBayes(Gender ~ ., data = gender_data, method = "class")
predictions <- predict(model, new_gender_data)
print(predictions)
shiny::runApp('E:/Data Science/R Shiny/Fil_prdict')
gitstatus
git status
git init
rsconnect::setAccountInfo(name='krishnaprakash',
token='D41BF02627CBA2596D7E01E1BC13CDDA',
secret='+u7HvURnBW0FPA0mhJYNDaqQN2yjykh3eFIceGtI')
library(rsconnect)
rsconnect::deployApp('E:/Data Science/R Shiny/Fil_prdict')
shiny::runApp('E:/Data Science/R Shiny/Startups')
runApp()
runApp()
runApp()
runApp()
runApp('E:/Data Science/R Shiny/Fund')
runApp('E:/Data Science/R Shiny/Fund')
runApp('E:/Data Science/R Shiny/Fund')
runApp('E:/Data Science/R Shiny/Fund')
runApp('E:/Data Science/R Shiny/Fund')
runApp('E:/Data Science/R Shiny/Fund1')
runApp('E:/Data Science/R Shiny/Email_spam_predict')
install.packages("shiny")
shiny::runApp()
install.packages("shiny")
shiny::runApp()
shiny::runApp()
install.packages("shiny")
install.packages("shiny")
runApp()
install.packages("class")
install.packages("class")
runApp()
runApp()
runApp()
runApp()
getwd()
runApp()
runApp()
# Load and preprocess the data
data <- read.csv('/mnt/data/email_classification.csv')
shiny::runApp('E:/Data Science/R Shiny/Email_classification')
runApp('E:/Data Science/R Shiny/Email_classification')
runApp('E:/Data Science/R Shiny/Email_classification')
runApp('E:/Data Science/R Shiny/Email_classification')
runApp('E:/Data Science/R Shiny/Email_classification')
runApp('E:/Data Science/R Shiny/Email_classification')
runApp('E:/Data Science/R Shiny/Email_classification')
